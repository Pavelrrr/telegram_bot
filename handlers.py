from aiogram import types, Router, F
import logging
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from bot import dp
from data.quiz_data import quiz_data
from utils import update_quiz_index, get_quiz_index, update_quiz_result, get_quiz_result, show_quiz_result

router = Router()

def generate_options_keyboard(answer_options):
    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤...")
    builder = InlineKeyboardBuilder()
    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=option)
        )
    builder.adjust(1)
    return builder.as_markup()

@router.callback_query()
async def handle_answer(callback: types.CallbackQuery):
    user_answer = callback.data  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat.id –≤–º–µ—Å—Ç–æ user_id
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer() 
    await callback.message.reply(f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    correct_answer = quiz_data[current_question_index]['options'][correct_index]

    if user_answer == correct_answer:
        await callback.message.answer("üü¢ –í–µ—Ä–Ω–æ!")
        current_score = await get_quiz_result(user_id)
        if current_score is None:
            score = 1  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—á–µ—Ç–∞ 1
        else:
            score = current_score + 1
        await update_quiz_result(user_id, score)
        logging.info(f'–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {score}')
    else:
        await callback.message.answer(f"üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)

    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!üéâ")
        await show_quiz_result(callback.message, user_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update_quiz_result(user_id, 0)
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))
        await callback.message.answer("–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!", reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∏–≥—Ä—É.")
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))

async def get_question(message, user_id):
    current_question_index = await get_quiz_index(user_id)
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts)
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)

@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def cmd_quiz(message: types.Message):
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

    
@router.message(F.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def cmd_restart(message: types.Message):
    await message.answer(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ!")
    await new_quiz(message)

async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    await get_question(message, user_id)